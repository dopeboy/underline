[{"/home/manish/work/underline/client/src/App.js":"1","/home/manish/work/underline/client/src/index.js":"2","/home/manish/work/underline/client/src/views/Login.jsx":"3","/home/manish/work/underline/client/src/utils.js":"4","/home/manish/work/underline/client/src/components/Main.jsx":"5","/home/manish/work/underline/client/src/views/Lobby.jsx":"6"},{"size":1743,"mtime":1613518337297,"results":"7","hashOfConfig":"8"},{"size":542,"mtime":1612329863243,"results":"9","hashOfConfig":"8"},{"size":4283,"mtime":1613518405106,"results":"10","hashOfConfig":"8"},{"size":205,"mtime":1612992090593,"results":"11","hashOfConfig":"8"},{"size":1731,"mtime":1613518804223,"results":"12","hashOfConfig":"8"},{"size":21358,"mtime":1613686733492,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1dp8guc",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/manish/work/underline/client/src/App.js",["28","29","30"],"/home/manish/work/underline/client/src/index.js",[],"/home/manish/work/underline/client/src/views/Login.jsx",[],"/home/manish/work/underline/client/src/utils.js",[],"/home/manish/work/underline/client/src/components/Main.jsx",["31","32","33","34","35","36","37","38","39","40","41","42","43"],"import { gql, useQuery } from '@apollo/client'\nimport {\n    Divider,\n    Form,\n    Progress,\n    Segment,\n    Grid,\n    Icon,\n    Card,\n    Image,\n    Header,\n    Input,\n    Container,\n    Button,\n    Dropdown,\n    Menu,\n} from 'semantic-ui-react'\nimport logo from 'images/logo.png'\nimport { clearJWT } from 'utils'\nimport { useHistory } from 'react-router-dom'\nimport './Main.scss'\n\nconst GET_ME_QUERY = gql`\n    query {\n        me {\n            firstName\n            lastName\n        }\n    }\n`\n\nconst Main = (props) => {\n    const { data } = useQuery(GET_ME_QUERY)\n    const logoutUser = () => {\n        clearJWT()\n        history.push('/')\n    }\n    const history = useHistory()\n\n    return (\n        <>\n            <Menu size=\"massive\" id=\"ule-navbar\">\n                <Menu.Item>\n                    <img src={logo} className=\"logo\" />\n                </Menu.Item>\n\n                <Menu.Item active>Lobby</Menu.Item>\n                <Menu.Item>Active</Menu.Item>\n                <Menu.Item>Completed</Menu.Item>\n\n                <Menu.Menu position=\"right\">\n                    <Dropdown\n                        item\n                        text={\n                            data &&\n                            `${data.me.firstName} ${data.me.lastName[0]}.`\n                        }\n                    >\n                        <Dropdown.Menu>\n                            <Dropdown.Item onClick={logoutUser}>\n                                Logout\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Menu>\n            </Menu>\n            <div className=\"ule-container\">{props.children}</div>\n        </>\n    )\n}\n\nexport default Main\n","/home/manish/work/underline/client/src/views/Lobby.jsx",["44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import React, { useState, Component } from 'react'\nimport {\n    Divider,\n    Form,\n    Progress,\n    Message,\n    Segment,\n    Grid,\n    Label,\n    Icon,\n    List,\n    Modal,\n    Card,\n    Image,\n    Header,\n    Input,\n    Container,\n    Button,\n    Dropdown,\n    Menu,\n} from 'semantic-ui-react'\nimport logo from '../images/logo.png'\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\nimport moment from 'moment-timezone'\nimport { Helmet } from 'react-helmet'\nimport './Lobby.scss'\n\nconst GET_TODAYS_SUBLINES_QUERY = gql`\n    query {\n        todaysSublines {\n            id\n            nbaPointsLine\n            line {\n                id\n                player {\n                    id\n                    name\n                    headshotUrl\n                    team {\n                        id\n                    }\n                }\n                game {\n                    datetime\n                    homeTeam {\n                        abbreviation\n                    }\n                    awayTeam {\n                        abbreviation\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst CHECK_APPROVED_LOCATION_QUERY = gql`\n    query ApprovedLocation($lat: Float!, $lng: Float!) {\n        approvedLocation(lat: $lat, lng: $lng)\n    }\n`\n\nconst CREATE_SLIP_MUTATION = gql`\n    mutation CreateSlip($picks: [PickType]!) {\n        createSlip(picks: $picks) {\n            status\n        }\n    }\n`\n\nconst PlayerList = ({ picks, addOrRemovePick }) => {\n    const { data } = useQuery(GET_TODAYS_SUBLINES_QUERY)\n    return (\n        <Form loading={!data}>\n            <Card.Group>\n                {data &&\n                    data.todaysSublines.map((subline) => {\n                        const pick = picks.filter((e) => {\n                            return e.id === subline.id\n                        })[0]\n\n                        return (\n                            <Card key={subline.id}>\n                                <Image\n                                    size=\"small\"\n                                    src={subline.line.player.headshotUrl}\n                                    wrapped\n                                    ui={false}\n                                />\n                                <Card.Content>\n                                    <Card.Header>\n                                        {subline.line.player.name}\n                                    </Card.Header>\n                                    <Card.Meta>\n                                        <span className=\"date\">\n                                            Points: {subline.nbaPointsLine}\n                                        </span>\n                                    </Card.Meta>\n                                    <Card.Description>\n                                        {\n                                            subline.line.game.awayTeam\n                                                .abbreviation\n                                        }{' '}\n                                        @{' '}\n                                        {\n                                            subline.line.game.homeTeam\n                                                .abbreviation\n                                        }{' '}\n                                        -{' '}\n                                        {moment(subline.line.game.datetime)\n                                            .tz('America/Los_Angeles')\n                                            .format('h:mma z')}\n                                    </Card.Description>\n                                </Card.Content>\n                                <Card.Content extra>\n                                    <Button.Group size=\"large\" fluid>\n                                        <Button\n                                            className=\"over-under-btn\"\n                                            color={\n                                                pick && !pick.under\n                                                    ? 'black'\n                                                    : ''\n                                            }\n                                            content=\"Over\"\n                                            onClick={() =>\n                                                addOrRemovePick(subline, false)\n                                            }\n                                        />\n                                        <Button.Or />\n                                        <Button\n                                            className=\"over-under-btn\"\n                                            content=\"Under\"\n                                            color={\n                                                pick && pick.under\n                                                    ? 'black'\n                                                    : null\n                                            }\n                                            onClick={() =>\n                                                addOrRemovePick(subline, true)\n                                            }\n                                        />\n                                    </Button.Group>\n                                </Card.Content>\n                            </Card>\n                        )\n                    })}\n            </Card.Group>\n        </Form>\n    )\n}\n\nconst Lobby = () => {\n    const [tab, setTab] = useState('lobby')\n    const [picks, setPicks] = useState([])\n    const [percent, setPercent] = useState(0)\n    const [multiplier, setMultiplier] = useState('1x')\n    const [payout, setPayout] = useState('')\n    const [entryAmount, setEntryAmount] = useState('')\n    const [processing, setProcessing] = useState(false)\n    const [errorModalVisible, setErrorModalVisible] = useState({\n        open: false,\n        header: '',\n        message: '',\n    })\n    const [payoutErrorVisible, setPayoutErrorVisible] = useState(false)\n    const client = useApolloClient()\n\n    const addOrRemovePick = (subline, under) => {\n        const pickIndex = picks.findIndex((e) => e.id === subline.id)\n        let newPicks = []\n\n        // If the pick already exists, remove it\n        if (pickIndex != -1) {\n            var array = [...picks] // deep copy\n\n            // Check if user is changing the over/under. If so, just update that.\n            if (array[pickIndex].under != under) {\n                array[pickIndex].under = under\n            }\n\n            // Else, remove it\n            else {\n                array.splice(pickIndex, 1)\n            }\n\n            newPicks = array\n            setPicks(newPicks)\n        }\n\n        // New pick. Set the attribute\n        else {\n            // If we're at 5 picks, tell the user and don't proceed\n            if (picks.length === 5) {\n                setErrorModalVisible({\n                    open: true,\n                    header: 'Too many picks',\n                    message: 'You can only choose five picks.',\n                })\n                newPicks = picks\n            } else {\n                newPicks = [...picks, Object.assign({}, subline, { under })]\n                setPicks(newPicks)\n            }\n        }\n\n        // Update multiplier\n        if (newPicks.length == 0) {\n            setPercent(0)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(entryAmount ? entryAmount : '')\n        } else if (newPicks.length === 1) {\n            setPercent(10)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(entryAmount ? entryAmount : '')\n        } else if (newPicks.length === 2) {\n            setPercent(25)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 3) {\n            setPercent(50)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 4) {\n            setPercent(75)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 5) {\n            setPercent(100)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        }\n    }\n\n    const getMultiplier = (numPicks) => {\n        if (numPicks == 0) {\n            return 1\n        } else if (numPicks === 1) {\n            return 1\n        } else if (numPicks === 2) {\n            return 3\n        } else if (numPicks === 3) {\n            return 6\n        } else if (numPicks === 4) {\n            return 10\n        } else if (numPicks === 5) {\n            return 20\n        }\n    }\n\n    // (1) Check if they entered a payout amount\n    // (2) Check that there are atleast two teams involved\n    // (3) Check the location of the user\n    // (4) Check if user has linked a payment method\n    // (5) Check if user has sufficients funds in their wallet\n    const submitPicks = async () => {\n        setProcessing(true)\n        let lat,\n            lng = null\n\n        // (1)\n        if (!payout) {\n            setPayoutErrorVisible(true)\n            setProcessing(false)\n            return\n        }\n\n        // (2)\n        let teamIds = []\n        for (let i = 0; i < picks.length; i++) {\n            const teamId = picks[i].line.player.team.id\n\n            if (!teamIds.includes(teamId)) {\n                teamIds.push(teamId)\n            }\n        }\n\n        if (teamIds.length < 2) {\n            // Error\n            setErrorModalVisible({\n                open: true,\n                header: 'Two teams must be involved',\n                message: 'You must select picks that span atleast two teams.',\n            })\n            setProcessing(false)\n            return\n        }\n\n        // (3)\n        if (!'geolocation' in navigator) {\n            setErrorModalVisible({\n                open: true,\n                header: 'Please enable location access',\n                message:\n                    'We need to verify your location. Please enable location access.',\n            })\n            setProcessing(false)\n            return\n        } else {\n            /*\n            navigator.geolocation.getCurrentPosition(async (position) => {\n                const { data } = await client.query({\n                    query: CHECK_APPROVED_LOCATION_QUERY,\n                    variables: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    },\n                })\n\n                if (!data.approvedLocation) {\n                    setErrorModalVisible({\n                        open: true,\n                        header: 'Invalid location',\n                        message:\n                            'Sorry, you are playing from an invalid location.',\n                    })\n                    setProcessing(false)\n                    return\n                }\n\n                lat = position.coords.latitude\n                lng = position.coords.longitude\n            })\n            */\n\n            // We made it! User is all good to go\n            alert(\n                'Great! Still need to check if you have a payment method + sufficient funds in your wallet...'\n            )\n\n            console.log(\n                picks.map((e) => {\n                    return {\n                        id: e.id,\n                        under: e.under,\n                    }\n                })\n            )\n            const response = await client.mutate({\n                mutation: CREATE_SLIP_MUTATION,\n                variables: {\n                    picks: picks.map((e) => {\n                        return {\n                            id: e.id,\n                            under: e.under,\n                        }\n                    }),\n                },\n            })\n        }\n    }\n\n    return (\n        <div id=\"ul-dashboard\">\n            <Helmet>\n                <title>Lobby</title>\n            </Helmet>\n            <Modal\n                onClose={() => setErrorModalVisible({ open: false })}\n                open={errorModalVisible.open}\n                size=\"small\"\n            >\n                <Header>\n                    <Icon name=\"exclamation circle\" />\n                    {errorModalVisible.header}\n                </Header>\n                <Modal.Content>\n                    <p>{errorModalVisible.message}</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button\n                        onClick={() => setErrorModalVisible({ open: false })}\n                    >\n                        OK\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n            <Header as=\"h2\" textAlign=\"center\">\n                Over/Under\n                <Header.Subheader>\n                    Select 1 player from atleast two teams\n                </Header.Subheader>\n            </Header>\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={12}>\n                        <Header as=\"h1\">Featured players</Header>\n                        <PlayerList\n                            picks={picks}\n                            addOrRemovePick={addOrRemovePick}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Header as=\"h1\">Review picks</Header>\n                        <Progress percent={percent} color=\"green\">\n                            {multiplier}\n                        </Progress>\n                        <Form loading={processing}>\n                            <Form.Group widths=\"equal\">\n                                <Form.Input\n                                    fluid\n                                    icon=\"dollar\"\n                                    iconPosition=\"left\"\n                                    label=\"Entry amount\"\n                                    placeholder=\"$0\"\n                                    error={payoutErrorVisible}\n                                    size=\"huge\"\n                                    onChange={(e) => {\n                                        setPayoutErrorVisible(false)\n                                        setEntryAmount(e.target.value)\n                                        setPayout(\n                                            (e.target.value *\n                                                getMultiplier(picks.length): '')\n                                        )\n                                    }}\n                                />\n                                <Form.Input\n                                    fluid\n                                    icon=\"dollar\"\n                                    iconPosition=\"left\"\n                                    className=\"payout-box\"\n                                    label=\"Payout\"\n                                    placeholder=\"$0\"\n                                    value={payout}\n                                    size=\"huge\"\n                                />\n                            </Form.Group>\n                            <Form.Button\n                                disabled={picks.length < 2}\n                                onClick={submitPicks}\n                                fluid\n                                color=\"green\"\n                                size=\"huge\"\n                            >\n                                Submit\n                            </Form.Button>\n                        </Form>\n                        <Header as=\"h2\">Slip</Header>\n                        {picks.length === 0 && (\n                            <p>Add a player from the left.</p>\n                        )}\n                        {picks.map((pick) => (\n                            <Card fluid className=\"slip-card\">\n                                <Card.Content>\n                                    <Grid columns=\"two\" divided>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <Image\n                                                    src={\n                                                        pick.line.player\n                                                            .headshotUrl\n                                                    }\n                                                />\n                                            </Grid.Column>\n                                            <Grid.Column>\n                                                <Header as=\"h4\">\n                                                    {pick.line.player.name}\n                                                </Header>\n                                                <List>\n                                                    <List.Item className=\"lol\">\n                                                        <List.Icon name=\"hashtag\" />\n                                                        <List.Content>\n                                                            Points:{' '}\n                                                            {pick.nbaPointsLine}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                    <List.Item>\n                                                        <List.Icon name=\"calendar outline\" />\n                                                        <List.Content>\n                                                            {\n                                                                pick.line.game\n                                                                    .awayTeam\n                                                                    .abbreviation\n                                                            }{' '}\n                                                            @{' '}\n                                                            {\n                                                                pick.line.game\n                                                                    .homeTeam\n                                                                    .abbreviation\n                                                            }{' '}\n                                                            -{' '}\n                                                            {moment(\n                                                                pick.line.game\n                                                                    .datetime\n                                                            )\n                                                                .tz(\n                                                                    'America/Los_Angeles'\n                                                                )\n                                                                .format(\n                                                                    'h:mma z'\n                                                                )}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                    <List.Item>\n                                                        <List.Icon name=\"basketball ball\" />\n                                                        <List.Content>\n                                                            {pick.under\n                                                                ? 'Under'\n                                                                : 'Over'}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                </List>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Card.Content>\n                                <Card.Content extra>\n                                    <Button\n                                        fluid\n                                        color=\"red\"\n                                        basic\n                                        size=\"tiny\"\n                                        onClick={() =>\n                                            addOrRemovePick(pick, pick.under)\n                                        }\n                                    >\n                                        Remove\n                                    </Button>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Lobby\n",{"ruleId":"65","severity":1,"message":"66","line":1,"column":10,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},{"ruleId":"65","severity":1,"message":"69","line":1,"column":15,"nodeType":"67","messageId":"68","endLine":1,"endColumn":23},{"ruleId":"65","severity":1,"message":"70","line":14,"column":5,"nodeType":"67","messageId":"68","endLine":14,"endColumn":9},{"ruleId":"65","severity":1,"message":"71","line":3,"column":5,"nodeType":"67","messageId":"68","endLine":3,"endColumn":12},{"ruleId":"65","severity":1,"message":"72","line":4,"column":5,"nodeType":"67","messageId":"68","endLine":4,"endColumn":9},{"ruleId":"65","severity":1,"message":"73","line":5,"column":5,"nodeType":"67","messageId":"68","endLine":5,"endColumn":13},{"ruleId":"65","severity":1,"message":"74","line":6,"column":5,"nodeType":"67","messageId":"68","endLine":6,"endColumn":12},{"ruleId":"65","severity":1,"message":"75","line":7,"column":5,"nodeType":"67","messageId":"68","endLine":7,"endColumn":9},{"ruleId":"65","severity":1,"message":"76","line":8,"column":5,"nodeType":"67","messageId":"68","endLine":8,"endColumn":9},{"ruleId":"65","severity":1,"message":"77","line":9,"column":5,"nodeType":"67","messageId":"68","endLine":9,"endColumn":9},{"ruleId":"65","severity":1,"message":"78","line":10,"column":5,"nodeType":"67","messageId":"68","endLine":10,"endColumn":10},{"ruleId":"65","severity":1,"message":"79","line":11,"column":5,"nodeType":"67","messageId":"68","endLine":11,"endColumn":11},{"ruleId":"65","severity":1,"message":"80","line":12,"column":5,"nodeType":"67","messageId":"68","endLine":12,"endColumn":10},{"ruleId":"65","severity":1,"message":"81","line":13,"column":5,"nodeType":"67","messageId":"68","endLine":13,"endColumn":14},{"ruleId":"65","severity":1,"message":"82","line":14,"column":5,"nodeType":"67","messageId":"68","endLine":14,"endColumn":11},{"ruleId":"83","severity":1,"message":"84","line":44,"column":21,"nodeType":"85","endLine":44,"endColumn":56},{"ruleId":"65","severity":1,"message":"86","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"71","line":3,"column":5,"nodeType":"67","messageId":"68","endLine":3,"endColumn":12},{"ruleId":"65","severity":1,"message":"87","line":6,"column":5,"nodeType":"67","messageId":"68","endLine":6,"endColumn":12},{"ruleId":"65","severity":1,"message":"74","line":7,"column":5,"nodeType":"67","messageId":"68","endLine":7,"endColumn":12},{"ruleId":"65","severity":1,"message":"88","line":9,"column":5,"nodeType":"67","messageId":"68","endLine":9,"endColumn":10},{"ruleId":"65","severity":1,"message":"80","line":16,"column":5,"nodeType":"67","messageId":"68","endLine":16,"endColumn":10},{"ruleId":"65","severity":1,"message":"81","line":17,"column":5,"nodeType":"67","messageId":"68","endLine":17,"endColumn":14},{"ruleId":"65","severity":1,"message":"89","line":19,"column":5,"nodeType":"67","messageId":"68","endLine":19,"endColumn":13},{"ruleId":"65","severity":1,"message":"90","line":20,"column":5,"nodeType":"67","messageId":"68","endLine":20,"endColumn":9},{"ruleId":"65","severity":1,"message":"91","line":22,"column":8,"nodeType":"67","messageId":"68","endLine":22,"endColumn":12},{"ruleId":"65","severity":1,"message":"92","line":57,"column":7,"nodeType":"67","messageId":"68","endLine":57,"endColumn":36},{"ruleId":"65","severity":1,"message":"93","line":153,"column":12,"nodeType":"67","messageId":"68","endLine":153,"endColumn":15},{"ruleId":"65","severity":1,"message":"94","line":153,"column":17,"nodeType":"67","messageId":"68","endLine":153,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":173,"column":23,"nodeType":"97","messageId":"98","endLine":173,"endColumn":25},{"ruleId":"95","severity":1,"message":"96","line":177,"column":40,"nodeType":"97","messageId":"98","endLine":177,"endColumn":42},{"ruleId":"95","severity":1,"message":"99","line":207,"column":29,"nodeType":"97","messageId":"98","endLine":207,"endColumn":31},{"ruleId":"95","severity":1,"message":"99","line":243,"column":22,"nodeType":"97","messageId":"98","endLine":243,"endColumn":24},{"ruleId":"65","severity":1,"message":"100","line":265,"column":13,"nodeType":"67","messageId":"68","endLine":265,"endColumn":16},{"ruleId":"65","severity":1,"message":"101","line":266,"column":13,"nodeType":"67","messageId":"68","endLine":266,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":297,"column":13,"nodeType":"97","messageId":"104","endLine":297,"endColumn":40},{"ruleId":"65","severity":1,"message":"105","line":346,"column":19,"nodeType":"67","messageId":"68","endLine":346,"endColumn":27},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'useQuery' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'Form' is defined but never used.","'Progress' is defined but never used.","'Segment' is defined but never used.","'Grid' is defined but never used.","'Icon' is defined but never used.","'Card' is defined but never used.","'Image' is defined but never used.","'Header' is defined but never used.","'Input' is defined but never used.","'Container' is defined but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'Message' is defined but never used.","'Label' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'logo' is defined but never used.","'CHECK_APPROVED_LOCATION_QUERY' is assigned a value but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'lat' is defined but never used.","'lng' is assigned a value but never used.","no-negated-in-lhs","The 'in' expression's left operand is negated.","negatedLHS","'response' is assigned a value but never used."]