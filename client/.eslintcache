[{"/home/manish/work/underline/client/src/App.js":"1","/home/manish/work/underline/client/src/index.js":"2","/home/manish/work/underline/client/src/views/Login.jsx":"3","/home/manish/work/underline/client/src/utils.js":"4","/home/manish/work/underline/client/src/components/Main.jsx":"5","/home/manish/work/underline/client/src/views/Lobby.jsx":"6","/home/manish/work/underline/client/src/views/Active.jsx":"7","/home/manish/work/underline/client/src/views/Completed.jsx":"8","/home/manish/work/underline/client/src/views/Signup.jsx":"9","/home/manish/work/underline/client/src/views/Settings.jsx":"10"},{"size":2741,"mtime":1614151424513,"results":"11","hashOfConfig":"12"},{"size":542,"mtime":1612329863243,"results":"13","hashOfConfig":"12"},{"size":4153,"mtime":1614066364554,"results":"14","hashOfConfig":"12"},{"size":287,"mtime":1614024241798,"results":"15","hashOfConfig":"12"},{"size":3002,"mtime":1614280072461,"results":"16","hashOfConfig":"12"},{"size":24246,"mtime":1614122923703,"results":"17","hashOfConfig":"12"},{"size":8183,"mtime":1614042812613,"results":"18","hashOfConfig":"12"},{"size":8492,"mtime":1614042771140,"results":"19","hashOfConfig":"12"},{"size":8065,"mtime":1614124693136,"results":"20","hashOfConfig":"12"},{"size":8162,"mtime":1614294127506,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1dp8guc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},"/home/manish/work/underline/client/src/App.js",["49","50","51"],"import { gql, useQuery } from '@apollo/client'\nimport { getJWT } from './utils'\nimport {\n    createHttpLink,\n    ApolloProvider,\n    ApolloClient,\n    InMemoryCache,\n} from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n} from 'react-router-dom'\nimport Login from 'views/Login.jsx'\nimport Signup from 'views/Signup.jsx'\nimport Lobby from 'views/Lobby.jsx'\nimport Active from 'views/Active.jsx'\nimport Completed from 'views/Completed.jsx'\nimport Settings from 'views/Settings.jsx'\nimport Main from 'components/Main'\n\nconst authLink = setContext((_, { headers }) => {\n    const token = getJWT()\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `JWT ${token}` : '',\n        },\n    }\n})\n\nconst httpLink = createHttpLink({\n    uri:\n        process.env.NODE_ENV === 'production'\n            ? '/gql'\n            : 'http://localhost:5000/graphql/',\n})\n\nconst defaultOptions: DefaultOptions = {\n    watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'ignore',\n    },\n    query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n    },\n}\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n    defaultOptions: defaultOptions,\n})\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n        {...rest}\n        render={(props) =>\n            getJWT() ? (\n                <Main>\n                    <Component {...props} />\n                </Main>\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n)\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <Switch>\n                    <PrivateRoute\n                        path=\"/lobby\"\n                        component={Lobby}\n                    ></PrivateRoute>\n                    <PrivateRoute\n                        path=\"/active\"\n                        component={Active}\n                    ></PrivateRoute>\n                    <PrivateRoute\n                        path=\"/completed\"\n                        component={Completed}\n                    ></PrivateRoute>\n                    <PrivateRoute\n                        path=\"/settings/:section?\"\n                        component={Settings}\n                    ></PrivateRoute>\n                    <Route path=\"/signup\">\n                        <Signup />\n                    </Route>\n                    <Route path=\"/\">\n                        <Login />\n                    </Route>\n                </Switch>\n            </Router>\n        </ApolloProvider>\n    )\n}\n\nexport default App\n","/home/manish/work/underline/client/src/index.js",[],["52","53"],"/home/manish/work/underline/client/src/views/Login.jsx",[],"/home/manish/work/underline/client/src/utils.js",[],"/home/manish/work/underline/client/src/components/Main.jsx",["54","55","56","57","58","59","60","61","62","63","64","65"],"import { gql, useQuery } from '@apollo/client'\nimport {\n    Divider,\n    Form,\n    Progress,\n    Segment,\n    Grid,\n    Icon,\n    Card,\n    Image,\n    Header,\n    Input,\n    Container,\n    Button,\n    Dropdown,\n    Menu,\n} from 'semantic-ui-react'\nimport logo from 'images/logo.png'\nimport { clearJWT } from 'utils'\nimport { Link, useLocation, useHistory } from 'react-router-dom'\nimport './Main.scss'\n\nconst GET_ME_QUERY = gql`\n    query {\n        me {\n            firstName\n            lastName\n            walletBalance\n        }\n    }\n`\n\nconst Main = (props) => {\n    const { data } = useQuery(GET_ME_QUERY)\n    const logoutUser = () => {\n        clearJWT()\n        history.push('/')\n    }\n    const history = useHistory()\n    const location = useLocation()\n\n    return (\n        <>\n            <Menu size=\"massive\" id=\"ule-navbar\">\n                <Menu.Item>\n                    <Link to=\"/lobby\">\n                        <img src={logo} className=\"logo\" />\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Item\n                    active={location.pathname === '/lobby'}\n                    as={Link}\n                    to=\"/lobby\"\n                >\n                    Lobby\n                </Menu.Item>\n                <Menu.Item\n                    active={location.pathname === '/active'}\n                    as={Link}\n                    to=\"/active\"\n                >\n                    Active\n                </Menu.Item>\n                <Menu.Item\n                    active={location.pathname === '/completed'}\n                    as={Link}\n                    to=\"/completed\"\n                >\n                    Completed\n                </Menu.Item>\n\n                <Menu.Menu position=\"right\">\n                    <Menu.Item position=\"right\">\n                        Balance:&nbsp;&nbsp;$\n                        {data && Math.round(data.me.walletBalance)}\n                    </Menu.Item>\n                    <Menu.Item position=\"right\">\n                        <Button primary as={Link} to=\"/settings/deposit\">\n                            Deposit\n                        </Button>\n                    </Menu.Item>\n\n                    <Dropdown\n                        item\n                        text={\n                            data &&\n                            `${data.me.firstName} ${data.me.lastName[0]}.`\n                        }\n                    >\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to=\"/settings/account\">\n                                Settings\n                            </Dropdown.Item>\n                            <Dropdown.Item onClick={logoutUser}>\n                                Logout\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Menu>\n            </Menu>\n            <div className=\"ule-container\">{props.children}</div>\n        </>\n    )\n}\n\nexport default Main\n","/home/manish/work/underline/client/src/views/Lobby.jsx",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85"],"import React, { useState, Component } from 'react'\nimport {\n    Divider,\n    Form,\n    Progress,\n    Message,\n    Segment,\n    Grid,\n    Label,\n    Icon,\n    List,\n    Modal,\n    Card,\n    Image,\n    Header,\n    Input,\n    Container,\n    Button,\n    Dropdown,\n    Menu,\n} from 'semantic-ui-react'\nimport logo from '../images/logo.png'\nimport { gql, useApolloClient, useQuery } from '@apollo/client'\nimport moment from 'moment-timezone'\nimport { Helmet } from 'react-helmet'\nimport './Lobby.scss'\nimport { useHistory } from 'react-router-dom'\n\nconst GET_TODAYS_SUBLINES_QUERY = gql`\n    query {\n        todaysSublines {\n            id\n            nbaPointsLine\n            line {\n                id\n                player {\n                    id\n                    name\n                    headshotUrl\n                    team {\n                        id\n                    }\n                }\n                game {\n                    datetime\n                    homeTeam {\n                        abbreviation\n                    }\n                    awayTeam {\n                        abbreviation\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst GET_CURRENT_DATE_QUERY = gql`\n    query currentDate {\n        currentDate\n    }\n`\n\nconst CHECK_APPROVED_LOCATION_QUERY = gql`\n    query ApprovedLocation($lat: Float!, $lng: Float!) {\n        approvedLocation(lat: $lat, lng: $lng)\n    }\n`\n\nconst CREATE_SLIP_MUTATION = gql`\n    mutation CreateSlip($picks: [PickType]!, $entryAmount: Int!) {\n        createSlip(picks: $picks, entryAmount: $entryAmount) {\n            success\n        }\n    }\n`\n\nconst PlayerList = ({ picks, addOrRemovePick }) => {\n    const { data } = useQuery(GET_TODAYS_SUBLINES_QUERY)\n    return (\n        <Form loading={!data}>\n            <Card.Group>\n                {data &&\n                    data.todaysSublines.map((subline) => {\n                        const pick = picks.filter((e) => {\n                            return e.id === subline.id\n                        })[0]\n\n                        return (\n                            <Card key={subline.id}>\n                                <Image\n                                    size=\"small\"\n                                    src={subline.line.player.headshotUrl}\n                                    wrapped\n                                    ui={false}\n                                />\n                                <Card.Content>\n                                    <Card.Header>\n                                        {subline.line.player.name}\n                                    </Card.Header>\n                                    <Card.Meta>\n                                        <span className=\"date\">\n                                            Points:{' '}\n                                            {parseFloat(\n                                                subline.nbaPointsLine\n                                            ).toFixed(1)}\n                                        </span>\n                                    </Card.Meta>\n                                    <Card.Description>\n                                        {\n                                            subline.line.game.awayTeam\n                                                .abbreviation\n                                        }{' '}\n                                        @{' '}\n                                        {\n                                            subline.line.game.homeTeam\n                                                .abbreviation\n                                        }{' '}\n                                        -{' '}\n                                        {moment\n                                            .tz(\n                                                subline.line.game.datetime,\n                                                moment.tz.guess()\n                                            )\n                                            .format('h:mma z')}\n                                    </Card.Description>\n                                </Card.Content>\n                                <Card.Content extra>\n                                    <Button.Group size=\"large\" fluid>\n                                        <Button\n                                            className=\"over-under-btn\"\n                                            color={\n                                                pick && !pick.under\n                                                    ? 'black'\n                                                    : ''\n                                            }\n                                            content=\"Over\"\n                                            onClick={() =>\n                                                addOrRemovePick(subline, false)\n                                            }\n                                        />\n                                        <Button.Or />\n                                        <Button\n                                            className=\"over-under-btn\"\n                                            content=\"Under\"\n                                            color={\n                                                pick && pick.under\n                                                    ? 'black'\n                                                    : null\n                                            }\n                                            onClick={() =>\n                                                addOrRemovePick(subline, true)\n                                            }\n                                        />\n                                    </Button.Group>\n                                </Card.Content>\n                            </Card>\n                        )\n                    })}\n            </Card.Group>\n        </Form>\n    )\n}\n\nconst LobbyHeader = () => {\n    const { data } = useQuery(GET_CURRENT_DATE_QUERY)\n    return (\n        <Header as=\"h1\">\n            Featured players (\n            {data && moment(data.currentDate).format('MMMM Do YYYY')})\n        </Header>\n    )\n}\n\nconst Lobby = () => {\n    const [tab, setTab] = useState('lobby')\n    const [picks, setPicks] = useState([])\n    const [percent, setPercent] = useState(0)\n    const [multiplier, setMultiplier] = useState('1x')\n    const [payout, setPayout] = useState('')\n    const [entryAmount, setEntryAmount] = useState('')\n    const [checking, setChecking] = useState(false)\n    const [processing, setProcessing] = useState(false)\n    const [errorModalVisible, setErrorModalVisible] = useState({\n        open: false,\n        header: '',\n        message: '',\n    })\n    const [confirmationModalVisible, setConfirmationModalVisible] = useState(\n        false\n    )\n    const [payoutErrorVisible, setPayoutErrorVisible] = useState(false)\n    const client = useApolloClient()\n    const history = useHistory()\n\n    const addOrRemovePick = (subline, under) => {\n        const pickIndex = picks.findIndex((e) => e.id === subline.id)\n        let newPicks = []\n\n        // If the pick already exists, remove it\n        if (pickIndex != -1) {\n            var array = [...picks] // deep copy\n\n            // Check if user is changing the over/under. If so, just update that.\n            if (array[pickIndex].under != under) {\n                array[pickIndex].under = under\n            }\n\n            // Else, remove it\n            else {\n                array.splice(pickIndex, 1)\n            }\n\n            newPicks = array\n            setPicks(newPicks)\n        }\n\n        // New pick. Set the attribute\n        else {\n            // If we're at 5 picks, tell the user and don't proceed\n            if (picks.length === 5) {\n                setErrorModalVisible({\n                    open: true,\n                    header: 'Too many picks',\n                    message: 'You can only choose five picks.',\n                })\n                newPicks = picks\n            } else {\n                newPicks = [...picks, Object.assign({}, subline, { under })]\n                setPicks(newPicks)\n            }\n        }\n\n        // Update multiplier\n        if (newPicks.length == 0) {\n            setPercent(0)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(entryAmount ? entryAmount : '')\n        } else if (newPicks.length === 1) {\n            setPercent(10)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(entryAmount ? entryAmount : '')\n        } else if (newPicks.length === 2) {\n            setPercent(25)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 3) {\n            setPercent(50)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 4) {\n            setPercent(75)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        } else if (newPicks.length === 5) {\n            setPercent(100)\n            setMultiplier(`${getMultiplier(newPicks.length)}x`)\n            setPayout(\n                entryAmount ? entryAmount * getMultiplier(newPicks.length) : ''\n            )\n        }\n    }\n\n    const getMultiplier = (numPicks) => {\n        if (numPicks == 0) {\n            return 1\n        } else if (numPicks === 1) {\n            return 1\n        } else if (numPicks === 2) {\n            return 3\n        } else if (numPicks === 3) {\n            return 6\n        } else if (numPicks === 4) {\n            return 10\n        } else if (numPicks === 5) {\n            return 20\n        }\n    }\n\n    // (1) Check if they entered a payout amount\n    // (2) Check if entry amount is <= $10\n    // (3) Check that there are atleast two teams involved\n    // (4) Check the location of the user\n    // (5) Check if user has linked a payment method\n    // (6) Check if user has sufficients funds in their wallet\n    const checkPicks = () => {\n        setChecking(true)\n        let lat,\n            lng = null\n\n        // (1)\n        if (!payout) {\n            setPayoutErrorVisible(true)\n            setChecking(false)\n            return\n        }\n\n        if (entryAmount > 10) {\n            setPayoutErrorVisible(true)\n            setErrorModalVisible({\n                open: true,\n                header: 'Max $10 entry',\n                message: 'We only allow a maximum of $10 for entry'\n            })\n            setChecking(false)\n            return\n        }\n\n        // (2)\n        let teamIds = []\n        for (let i = 0; i < picks.length; i++) {\n            const teamId = picks[i].line.player.team.id\n\n            if (!teamIds.includes(teamId)) {\n                teamIds.push(teamId)\n            }\n        }\n\n        if (teamIds.length < 2) {\n            // Error\n            setErrorModalVisible({\n                open: true,\n                header: 'Two teams must be involved',\n                message: 'You must select picks that span at least two teams.',\n            })\n            setChecking(false)\n            return\n        }\n\n        // (3)\n        if (!'geolocation' in navigator) {\n            setErrorModalVisible({\n                open: true,\n                header: 'Please enable location access',\n                message:\n                    'We need to verify your location. Please enable location access.',\n            })\n            setChecking(false)\n            return\n        } else {\n            /*\n            navigator.geolocation.getCurrentPosition(async (position) => {\n                const { data } = await client.query({\n                    query: CHECK_APPROVED_LOCATION_QUERY,\n                    variables: {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                    },\n                })\n\n                if (!data.approvedLocation) {\n                    setErrorModalVisible({\n                        open: true,\n                        header: 'Invalid location',\n                        message:\n                            'Sorry, you are playing from an invalid location.',\n                    })\n                    setChecking(false)\n                    return\n                }\n\n                lat = position.coords.latitude\n                lng = position.coords.longitude\n            })\n            */\n\n            // We made it! User is all good to go\n            // Show confirmation modal\n            setChecking(false)\n            setConfirmationModalVisible(true)\n\n            /*\n            const response = await client.mutate({\n                mutation: CREATE_SLIP_MUTATION,\n                variables: {\n                    picks: picks.map((e) => {\n                        return {\n                            id: e.id,\n                            under: e.under,\n                        }\n                    }),\n                },\n            })\n\n            // Redirect\n            if (response.data.createSlip.success) {\n                history.push('/active')\n            }\n            */\n        }\n    }\n\n    const submitPicks = async () => {\n        setProcessing(true)\n\n        const response = await client.mutate({\n            mutation: CREATE_SLIP_MUTATION,\n            variables: {\n                picks: picks.map((e) => {\n                    return {\n                        id: e.id,\n                        under: e.under,\n                    }\n                }),\n                entryAmount: entryAmount,\n            },\n        })\n\n        // Redirect\n        if (response.data.createSlip.success) {\n            history.push('/active?success')\n        }\n    }\n\n    return (\n        <div id=\"ul-dashboard\">\n            <Helmet>\n                <title>Lobby</title>\n            </Helmet>\n            <Modal\n                onClose={() => setErrorModalVisible({ open: false })}\n                open={errorModalVisible.open}\n                size=\"small\"\n            >\n                <Header>\n                    <Icon name=\"exclamation circle\" />\n                    {errorModalVisible.header}\n                </Header>\n                <Modal.Content>\n                    <p>{errorModalVisible.message}</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button\n                        onClick={() => setErrorModalVisible({ open: false })}\n                    >\n                        OK\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n            <Modal\n                onClose={() => setConfirmationModalVisible(false)}\n                open={confirmationModalVisible}\n                size=\"small\"\n            >\n                <Header>\n                    <Icon name=\"exclamation circle\" />\n                    Confirmation\n                </Header>\n                <Modal.Content>\n                    <p>Once you confirmed, your selections are locked.</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button\n                        color=\"red\"\n                        onClick={() => setConfirmationModalVisible(false)}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        color=\"green\"\n                        onClick={submitPicks}\n                        loading={processing}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n            <Header as=\"h2\" textAlign=\"center\">\n                Over/Under\n                <Header.Subheader>\n                    Select 1 player from at least two teams\n                </Header.Subheader>\n            </Header>\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={12}>\n                        <LobbyHeader />\n                        <PlayerList\n                            picks={picks}\n                            addOrRemovePick={addOrRemovePick}\n                        />\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <Header as=\"h1\">Review picks</Header>\n                        <Progress percent={percent} color=\"green\">\n                            {multiplier}\n                        </Progress>\n                        <Form loading={checking}>\n                            <Form.Group widths=\"equal\">\n                                <Form.Input\n                                    fluid\n                                    icon=\"dollar\"\n                                    iconPosition=\"left\"\n                                    label=\"Entry amount\"\n                                    placeholder=\"0\"\n                                    error={payoutErrorVisible}\n                                    size=\"huge\"\n                                    onChange={(e) => {\n                                        setPayoutErrorVisible(false)\n                                        setEntryAmount(e.target.value)\n                                        setPayout(\n                                            (e.target.value *\n                                                getMultiplier(picks.length): '')\n                                        )\n                                    }}\n                                />\n                                <Form.Input\n                                    fluid\n                                    icon=\"dollar\"\n                                    iconPosition=\"left\"\n                                    className=\"payout-box\"\n                                    label=\"Payout\"\n                                    placeholder=\"0\"\n                                    value={payout}\n                                    size=\"huge\"\n                                />\n                            </Form.Group>\n                            <Form.Button\n                                disabled={picks.length < 2}\n                                onClick={checkPicks}\n                                fluid\n                                color=\"green\"\n                                size=\"huge\"\n                            >\n                                Submit\n                            </Form.Button>\n                        </Form>\n                        <Header as=\"h2\">Slip</Header>\n                        {picks.length === 0 && (\n                            <p>Add a player from the left.</p>\n                        )}\n                        {picks.map((pick) => (\n                            <Card fluid className=\"slip-card\">\n                                <Card.Content>\n                                    <Grid columns=\"two\" divided>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <Image\n                                                    src={\n                                                        pick.line.player\n                                                            .headshotUrl\n                                                    }\n                                                />\n                                            </Grid.Column>\n                                            <Grid.Column>\n                                                <Header as=\"h4\">\n                                                    {pick.line.player.name}\n                                                </Header>\n                                                <List>\n                                                    <List.Item className=\"lol\">\n                                                        <List.Icon name=\"hashtag\" />\n                                                        <List.Content>\n                                                            Points:{' '}\n                                                            {parseFloat(\n                                                                pick.nbaPointsLine\n                                                            ).toFixed(1)}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                    <List.Item>\n                                                        <List.Icon name=\"calendar outline\" />\n                                                        <List.Content>\n                                                            {\n                                                                pick.line.game\n                                                                    .awayTeam\n                                                                    .abbreviation\n                                                            }{' '}\n                                                            @{' '}\n                                                            {\n                                                                pick.line.game\n                                                                    .homeTeam\n                                                                    .abbreviation\n                                                            }{' '}\n                                                            -{' '}\n                                                            {moment\n                                                                .tz(\n                                                                    pick.line\n                                                                        .game\n                                                                        .datetime,\n                                                                    moment.tz.guess()\n                                                                )\n                                                                .format(\n                                                                    'h:mma z'\n                                                                )}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                    <List.Item>\n                                                        <List.Icon name=\"basketball ball\" />\n                                                        <List.Content>\n                                                            {pick.under\n                                                                ? 'Under'\n                                                                : 'Over'}\n                                                        </List.Content>\n                                                    </List.Item>\n                                                </List>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Card.Content>\n                                <Card.Content extra>\n                                    <Button\n                                        fluid\n                                        color=\"red\"\n                                        basic\n                                        size=\"tiny\"\n                                        onClick={() =>\n                                            addOrRemovePick(pick, pick.under)\n                                        }\n                                    >\n                                        Remove\n                                    </Button>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Lobby\n","/home/manish/work/underline/client/src/views/Active.jsx",["86","87","88","89","90","91","92"],"import React, { useState } from 'react'\nimport {\n    Message,\n    Card,\n    Header,\n    Grid,\n    Image,\n    Modal,\n    Icon,\n    Label,\n    List,\n    Form,\n    Button,\n    Container,\n    Segment,\n} from 'semantic-ui-react'\nimport logo from 'images/logo.png'\nimport { Helmet } from 'react-helmet'\nimport { gql, useQuery } from '@apollo/client'\nimport { parseQuery, saveJWT } from 'utils'\nimport { Link, useLocation, useHistory } from 'react-router-dom'\nimport moment from 'moment-timezone'\nimport './Active.scss'\n\nconst GET_ACTIVE_SLIPS_QUERY = gql`\n    query {\n        activeSlips {\n            id\n            datetimeCreated\n            entryAmount\n            payoutAmount\n            picks {\n                id\n                underNbaPoints\n                won\n                subline {\n                    nbaPointsLine\n                    line {\n                        nbaPointsActual\n                        id\n                        player {\n                            name\n                            headshotUrl\n                        }\n                        game {\n                            homeTeam {\n                                abbreviation\n                                id\n                            }\n                            awayTeam {\n                                abbreviation\n                                id\n                            }\n                            datetime\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst Active = () => {\n    const history = useHistory()\n    const { data } = useQuery(GET_ACTIVE_SLIPS_QUERY)\n    const [successModalVisible, setSuccessModalVisible] = useState(\n        parseQuery(useLocation().search).get('success') !== null\n    )\n\n    return (\n        <Form loading={!data} id=\"ul-active\">\n            <Helmet>\n                <title>Active slips</title>\n            </Helmet>\n            <Modal\n                onClose={() => setSuccessModalVisible(false)}\n                open={successModalVisible}\n                size=\"small\"\n            >\n                <Header>\n                    <Icon name=\"exclamation circle\" />\n                    Success\n                </Header>\n                <Modal.Content>\n                    <p>Your slip has been submitted.</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => setSuccessModalVisible(false)}>\n                        OK\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n            <Header as=\"h2\">Active slips</Header>\n            {data && data.activeSlips.length === 0 && (\n                <div>\n                    No slips yet. Go to the <Link to=\"/lobby\">Lobby</Link> to\n                    make some picks.\n                </div>\n            )}\n\n            {data &&\n                data.activeSlips.map((slip) => {\n                    return (\n                        <Segment className=\"slip\" raised>\n                            <Header as=\"h3\" className=\"title\">\n                                {' '}\n                                {`${slip.picks.length} Picks for $${slip.payoutAmount}`}\n                            </Header>\n                            {slip.picks.map((pick, i) => (\n                                <Grid className=\"pick-table\">\n                                    <Grid.Row>\n                                        <Grid.Column width={3}>\n                                            <Image\n                                                size=\"tiny\"\n                                                src={\n                                                    pick.subline.line.player\n                                                        .headshotUrl\n                                                }\n                                            />\n                                        </Grid.Column>\n                                        <Grid.Column width={5}>\n                                            <Header\n                                                as=\"h4\"\n                                                className=\"player-name\"\n                                            >\n                                                {pick.subline.line.player.name}\n                                            </Header>\n                                            <span className=\"over-under\">\n                                                {`${\n                                                    pick.underNbaPoints\n                                                        ? 'Under'\n                                                        : 'Over'\n                                                }`}\n                                            </span>{' '}\n                                            {`${parseFloat(\n                                                pick.subline.nbaPointsLine\n                                            ).toFixed(1)} points`}\n                                        </Grid.Column>\n                                        <Grid.Column width={5}>\n                                            {\n                                                pick.subline.line.game.awayTeam\n                                                    .abbreviation\n                                            }{' '}\n                                            @{' '}\n                                            {\n                                                pick.subline.line.game.homeTeam\n                                                    .abbreviation\n                                            }{' '}\n                                            -{' '}\n                                            {moment(\n                                                pick.subline.line.game.datetime\n                                            )\n                                                .tz('America/Los_Angeles')\n                                                .format('h:mma z')}\n                                            {pick.subline.line\n                                                .nbaPointsActual && (\n                                                <div>\n                                                    {`${parseInt(\n                                                        pick.subline.line\n                                                            .nbaPointsActual\n                                                    )} points scored`}\n                                                </div>\n                                            )}\n                                        </Grid.Column>\n                                        <Grid.Column width={3}>\n                                            {pick.won === null && (\n                                                <Label color=\"gray\">\n                                                    In progress\n                                                </Label>\n                                            )}\n                                            {pick.won === true && (\n                                                <Label color=\"green\">Won</Label>\n                                            )}\n                                            {pick.won === false && (\n                                                <Label color=\"red\">Lost</Label>\n                                            )}\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            ))}\n                            <div className=\"details\">\n                                <div className=\"created\">\n                                    created{' '}\n                                    {moment(slip.datetimeCreated).fromNow()}\n                                </div>\n                                <div className=\"entry-amount\">\n                                    ${`${slip.entryAmount} Entry`}\n                                </div>\n                            </div>\n                        </Segment>\n                    )\n                })}\n        </Form>\n    )\n}\n\nexport default Active\n","/home/manish/work/underline/client/src/views/Completed.jsx",["93","94","95","96","97","98","99"],"import React, { useState } from 'react'\nimport {\n    Message,\n    Card,\n    Header,\n    Grid,\n    Image,\n    Modal,\n    Icon,\n    Label,\n    List,\n    Form,\n    Button,\n    Container,\n    Segment,\n} from 'semantic-ui-react'\nimport logo from 'images/logo.png'\nimport { Helmet } from 'react-helmet'\nimport { gql, useQuery } from '@apollo/client'\nimport { parseQuery, saveJWT } from 'utils'\nimport { Link, useLocation, useHistory } from 'react-router-dom'\nimport moment from 'moment-timezone'\nimport './Active.scss'\n\nconst GET_INACTIVE_SLIPS_QUERY = gql`\n    query {\n        completeSlips {\n            id\n            datetimeCreated\n            entryAmount\n            payoutAmount\n            won\n            picks {\n                id\n                underNbaPoints\n                won\n                subline {\n                    nbaPointsLine\n                    line {\n                        nbaPointsActual\n                        id\n                        player {\n                            name\n                            headshotUrl\n                        }\n                        game {\n                            homeTeam {\n                                abbreviation\n                                id\n                            }\n                            awayTeam {\n                                abbreviation\n                                id\n                            }\n                            datetime\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n\nconst Completed = () => {\n    const history = useHistory()\n    const { data } = useQuery(GET_INACTIVE_SLIPS_QUERY)\n    const [successModalVisible, setSuccessModalVisible] = useState(\n        parseQuery(useLocation().search).get('success') !== null\n    )\n\n    return (\n        <Form loading={!data} id=\"ul-active\">\n            <Helmet>\n                <title>Complete slips</title>\n            </Helmet>\n            <Modal\n                onClose={() => setSuccessModalVisible(false)}\n                open={successModalVisible}\n                size=\"small\"\n            >\n                <Header>\n                    <Icon name=\"exclamation circle\" />\n                    Success\n                </Header>\n                <Modal.Content>\n                    <p>Your slip has been submitted.</p>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => setSuccessModalVisible(false)}>\n                        OK\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n            <Header as=\"h2\">Completed slips</Header>\n            {data && data.completeSlips.length === 0 && (\n                <div>\n                    No completed slips yet. Go to the{' '}\n                    <Link to=\"/lobby\">Lobby</Link> to make some picks.\n                </div>\n            )}\n\n            {data &&\n                data.completeSlips.map((slip) => {\n                    return (\n                        <Segment className=\"slip\" raised>\n                            <Header as=\"h3\" className=\"title\">\n                                {' '}\n                                {`${slip.picks.length} Picks for $${slip.payoutAmount}`}\n                            </Header>\n                            {slip.picks.map((pick, i) => (\n                                <Grid className=\"pick-table\">\n                                    <Grid.Row>\n                                        <Grid.Column width={3}>\n                                            <Image\n                                                size=\"tiny\"\n                                                src={\n                                                    pick.subline.line.player\n                                                        .headshotUrl\n                                                }\n                                            />\n                                        </Grid.Column>\n                                        <Grid.Column width={5}>\n                                            <Header\n                                                as=\"h4\"\n                                                className=\"player-name\"\n                                            >\n                                                {pick.subline.line.player.name}\n                                            </Header>\n                                            <span className=\"over-under\">\n                                                {`${\n                                                    pick.underNbaPoints\n                                                        ? 'Under'\n                                                        : 'Over'\n                                                }`}\n                                            </span>{' '}\n                                            {`${parseFloat(\n                                                pick.subline.nbaPointsLine\n                                            ).toFixed(1)} points`}\n                                        </Grid.Column>\n                                        <Grid.Column width={5}>\n                                            {\n                                                pick.subline.line.game.awayTeam\n                                                    .abbreviation\n                                            }{' '}\n                                            @{' '}\n                                            {\n                                                pick.subline.line.game.homeTeam\n                                                    .abbreviation\n                                            }{' '}\n                                            -{' '}\n                                            {moment(\n                                                pick.subline.line.game.datetime\n                                            )\n                                                .tz('America/Los_Angeles')\n                                                .format('h:mma z')}\n                                            {pick.subline.line\n                                                .nbaPointsActual && (\n                                                <div>\n                                                    {`${parseInt(\n                                                        pick.subline.line\n                                                            .nbaPointsActual\n                                                    )} points scored`}\n                                                </div>\n                                            )}\n                                        </Grid.Column>\n                                        <Grid.Column width={3}>\n                                            {pick.won === null && (\n                                                <Label color=\"gray\">\n                                                    In progress\n                                                </Label>\n                                            )}\n                                            {pick.won === true && (\n                                                <Label color=\"green\">Won</Label>\n                                            )}\n                                            {pick.won === false && (\n                                                <Label color=\"red\">Lost</Label>\n                                            )}\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            ))}\n                            <div className=\"details\">\n                                <div\n                                    className={`entry-amount ${\n                                        slip.won ? 'won' : ''\n                                    }`}\n                                >\n                                    {!slip.won && `-$${slip.entryAmount}`}\n                                    {slip.won && `+$${slip.payoutAmount}`}\n                                </div>\n                                <div className=\"created\">\n                                    created{' '}\n                                    {moment(slip.datetimeCreated).fromNow()}\n                                </div>\n                            </div>\n                        </Segment>\n                    )\n                })}\n        </Form>\n    )\n}\n\nexport default Completed\n","/home/manish/work/underline/client/src/views/Signup.jsx",[],"/home/manish/work/underline/client/src/views/Settings.jsx",["100","101","102","103","104","105","106"],"import React, { useEffect, useState } from 'react'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport {\n    Header,\n    Menu,\n    Message,\n    Grid,\n    Divider,\n    List,\n    Form,\n    Button,\n    Container,\n} from 'semantic-ui-react'\nimport logo from 'images/logo.png'\nimport { Helmet } from 'react-helmet'\nimport { useQuery, gql, useMutation } from '@apollo/client'\nimport { parseQuery, saveJWT } from 'utils'\nimport { useParams, useLocation, Link, useHistory } from 'react-router-dom'\nimport moment from 'moment-timezone'\nimport './Settings.scss'\n\nconst GET_ME_QUERY = gql`\n    query {\n        me {\n            firstName\n            lastName\n            email\n            dateJoined\n        }\n    }\n`\n\nconst RECORD_DEPOSIT_MUTATION = gql`\n    mutation RecordDeposit(\n        $amount: Float!\n        $transactionDetails: String!\n        $orderDetails: String!\n    ) {\n        recordDeposit(\n            amount: $amount\n            transactionDetails: $transactionDetails\n            orderDetails: $orderDetails\n        ) {\n            success\n        }\n    }\n`\n\nconst Account = () => {\n    const { data } = useQuery(GET_ME_QUERY)\n    return (\n        <Form loading={!data}>\n            <Header as=\"h2\">Account</Header>\n            <Header as=\"h3\">Personal information</Header>\n            {data && (\n                <List>\n                    <List.Item>\n                        <List.Icon name=\"user\" />\n                        <List.Content>\n                            {data.me.firstName} {data.me.lastName}\n                        </List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon name=\"mail\" />\n                        <List.Content>{data.me.email}</List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon name=\"star\" />\n                        <List.Content>\n                            {moment(data.me.dateJoined).format('MMMM Do YYYY')}\n                        </List.Content>\n                    </List.Item>\n                </List>\n            )}\n        </Form>\n    )\n}\n\nconst Deposit = () => {\n    const [selectedPaymentAmount, setSelectedPaymentAmount] = useState()\n\n    const [recordDeposit] = useMutation(RECORD_DEPOSIT_MUTATION, {\n        onCompleted: (data) => {\n            //setProcessing(false)\n            //setError(false)\n            // show modal\n        },\n        onError: (data) => {\n            //setProcessing(false)\n            //setError(true)\n        },\n    })\n\n    return (\n        <div className=\"ul-deposit\">\n            <Header as=\"h2\">Deposit</Header>\n            <p>\n                Select an option below. All of our payments are processed\n                securely through PayPal.\n            </p>\n            <div className=\"parent\">\n                <Button\n                    active={selectedPaymentAmount === 5}\n                    className=\"amt-btn\"\n                    toggle\n                    basic\n                    fluid\n                    size=\"large\"\n                    onClick={() => setSelectedPaymentAmount(5)}\n                >\n                    $5\n                </Button>\n                <Button\n                    active={selectedPaymentAmount === 10}\n                    className=\"amt-btn\"\n                    toggle\n                    basic\n                    fluid\n                    size=\"large\"\n                    onClick={() => setSelectedPaymentAmount(10)}\n                >\n                    $10\n                </Button>\n                <Button\n                    active={selectedPaymentAmount === 20}\n                    className=\"amt-btn\"\n                    toggle\n                    basic\n                    fluid\n                    size=\"large\"\n                    onClick={() => setSelectedPaymentAmount(20)}\n                >\n                    $20\n                </Button>\n                <Divider />\n                <PayPalButton\n                    amount={selectedPaymentAmount}\n                    shippingPreference=\"NO_SHIPPING\"\n                    onClick={() => {\n                        return selectedPaymentAmount\n                    }}\n                    options={{\n                        clientId:\n                            process.env.NODE_ENV === 'development'\n                                ? 'AX5eD1ofG_dHeCpSVDbmlvoc9ghz53qS8eAwseFFNWOQxtGIb_H6ZD_uiOGrCSlCZRnwb41cjDPnIwo1'\n                                : 'Ad0GFGEqk719MEe6gKNnkiEwmapRr7tKRhgiCV56dQeX60G8_YD7pZ7oKvCRUW8a8ZIoweg6sFo8WzkN',\n                        disableFunding: 'credit',\n                    }}\n                    onSuccess={(details, data) => {\n                        console.log(details)\n                        console.log(data)\n\n                        recordDeposit({\n                            variables: {\n                                amount: details.purchase_units[0].amount.value,\n                                transactionDetails: JSON.stringify(details),\n                                orderDetails: JSON.stringify(data),\n                            },\n                        })\n\n                        /*\n                        alert(\n                            'Transaction completed by ' +\n                                details.payer.name.given_name\n                        )\n\n                        // OPTIONAL: Call your server to save the transaction\n                        return fetch('/paypal-transaction-complete', {\n                            method: 'post',\n                            body: JSON.stringify({\n                                orderID: data.orderID,\n                            }),\n                        })\n                        */\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nconst Withdraw = () => {\n    return (\n        <>\n            <Header as=\"h2\">Withdraw</Header>\n            <p>\n                Click{' '}\n                <b>\n                    <a href=\"mailto: support@underlinesports.com?subject=Withdrawal Request\">\n                        here\n                    </a>\n                </b>{' '}\n                to submit a request to withdraw funds. We will process your\n                request within 48 hours.\n            </p>\n        </>\n    )\n}\n\nconst Settings = () => {\n    const history = useHistory()\n    let { section } = useParams()\n    const [activeItem, setActiveItem] = useState('')\n    useEffect(() => {\n        setActiveItem(section)\n    }, [section])\n\n    return (\n        <div id=\"ul-settings\">\n            <Helmet>\n                <title>Settings</title>\n            </Helmet>\n            <Grid columns={2}>\n                <Grid.Row>\n                    <Grid.Column width={3} className=\"nav-menu-col\">\n                        <Header as=\"h1\">Settings</Header>\n                        <Menu fluid secondary vertical>\n                            <Menu.Item\n                                name=\"account\"\n                                as={Link}\n                                to=\"/settings/account\"\n                                active={activeItem === 'account'}\n                            />\n                            <Menu.Item\n                                name=\"deposit\"\n                                as={Link}\n                                to=\"/settings/deposit\"\n                                active={activeItem === 'deposit'}\n                            />\n                            <Menu.Item\n                                name=\"withdraw\"\n                                as={Link}\n                                to=\"/settings/withdraw\"\n                                active={activeItem === 'withdraw'}\n                            />\n                        </Menu>\n                    </Grid.Column>\n                    <Grid.Column width={13}>\n                        {activeItem === 'account' && <Account />}\n                        {activeItem === 'deposit' && <Deposit />}\n                        {activeItem === 'withdraw' && <Withdraw />}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Settings\n",{"ruleId":"107","severity":1,"message":"108","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":13},{"ruleId":"107","severity":1,"message":"111","line":1,"column":15,"nodeType":"109","messageId":"110","endLine":1,"endColumn":23},{"ruleId":"107","severity":1,"message":"112","line":14,"column":5,"nodeType":"109","messageId":"110","endLine":14,"endColumn":9},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"107","severity":1,"message":"117","line":3,"column":5,"nodeType":"109","messageId":"110","endLine":3,"endColumn":12},{"ruleId":"107","severity":1,"message":"118","line":4,"column":5,"nodeType":"109","messageId":"110","endLine":4,"endColumn":9},{"ruleId":"107","severity":1,"message":"119","line":5,"column":5,"nodeType":"109","messageId":"110","endLine":5,"endColumn":13},{"ruleId":"107","severity":1,"message":"120","line":6,"column":5,"nodeType":"109","messageId":"110","endLine":6,"endColumn":12},{"ruleId":"107","severity":1,"message":"121","line":7,"column":5,"nodeType":"109","messageId":"110","endLine":7,"endColumn":9},{"ruleId":"107","severity":1,"message":"122","line":8,"column":5,"nodeType":"109","messageId":"110","endLine":8,"endColumn":9},{"ruleId":"107","severity":1,"message":"123","line":9,"column":5,"nodeType":"109","messageId":"110","endLine":9,"endColumn":9},{"ruleId":"107","severity":1,"message":"124","line":10,"column":5,"nodeType":"109","messageId":"110","endLine":10,"endColumn":10},{"ruleId":"107","severity":1,"message":"125","line":11,"column":5,"nodeType":"109","messageId":"110","endLine":11,"endColumn":11},{"ruleId":"107","severity":1,"message":"126","line":12,"column":5,"nodeType":"109","messageId":"110","endLine":12,"endColumn":10},{"ruleId":"107","severity":1,"message":"127","line":13,"column":5,"nodeType":"109","messageId":"110","endLine":13,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":47,"column":25,"nodeType":"130","endLine":47,"endColumn":60},{"ruleId":"107","severity":1,"message":"131","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"117","line":3,"column":5,"nodeType":"109","messageId":"110","endLine":3,"endColumn":12},{"ruleId":"107","severity":1,"message":"132","line":6,"column":5,"nodeType":"109","messageId":"110","endLine":6,"endColumn":12},{"ruleId":"107","severity":1,"message":"120","line":7,"column":5,"nodeType":"109","messageId":"110","endLine":7,"endColumn":12},{"ruleId":"107","severity":1,"message":"133","line":9,"column":5,"nodeType":"109","messageId":"110","endLine":9,"endColumn":10},{"ruleId":"107","severity":1,"message":"126","line":16,"column":5,"nodeType":"109","messageId":"110","endLine":16,"endColumn":10},{"ruleId":"107","severity":1,"message":"127","line":17,"column":5,"nodeType":"109","messageId":"110","endLine":17,"endColumn":14},{"ruleId":"107","severity":1,"message":"134","line":19,"column":5,"nodeType":"109","messageId":"110","endLine":19,"endColumn":13},{"ruleId":"107","severity":1,"message":"135","line":20,"column":5,"nodeType":"109","messageId":"110","endLine":20,"endColumn":9},{"ruleId":"107","severity":1,"message":"136","line":22,"column":8,"nodeType":"109","messageId":"110","endLine":22,"endColumn":12},{"ruleId":"107","severity":1,"message":"137","line":64,"column":7,"nodeType":"109","messageId":"110","endLine":64,"endColumn":36},{"ruleId":"107","severity":1,"message":"138","line":176,"column":12,"nodeType":"109","messageId":"110","endLine":176,"endColumn":15},{"ruleId":"107","severity":1,"message":"139","line":176,"column":17,"nodeType":"109","messageId":"110","endLine":176,"endColumn":23},{"ruleId":"140","severity":1,"message":"141","line":201,"column":23,"nodeType":"142","messageId":"143","endLine":201,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":205,"column":40,"nodeType":"142","messageId":"143","endLine":205,"endColumn":42},{"ruleId":"140","severity":1,"message":"144","line":235,"column":29,"nodeType":"142","messageId":"143","endLine":235,"endColumn":31},{"ruleId":"140","severity":1,"message":"144","line":271,"column":22,"nodeType":"142","messageId":"143","endLine":271,"endColumn":24},{"ruleId":"107","severity":1,"message":"145","line":294,"column":13,"nodeType":"109","messageId":"110","endLine":294,"endColumn":16},{"ruleId":"107","severity":1,"message":"146","line":295,"column":13,"nodeType":"109","messageId":"110","endLine":295,"endColumn":16},{"ruleId":"115","severity":1,"message":"147","line":337,"column":13,"nodeType":"142","messageId":"148","endLine":337,"endColumn":40},{"ruleId":"107","severity":1,"message":"132","line":3,"column":5,"nodeType":"109","messageId":"110","endLine":3,"endColumn":12},{"ruleId":"107","severity":1,"message":"123","line":4,"column":5,"nodeType":"109","messageId":"110","endLine":4,"endColumn":9},{"ruleId":"107","severity":1,"message":"149","line":11,"column":5,"nodeType":"109","messageId":"110","endLine":11,"endColumn":9},{"ruleId":"107","severity":1,"message":"127","line":14,"column":5,"nodeType":"109","messageId":"110","endLine":14,"endColumn":14},{"ruleId":"107","severity":1,"message":"136","line":17,"column":8,"nodeType":"109","messageId":"110","endLine":17,"endColumn":12},{"ruleId":"107","severity":1,"message":"150","line":20,"column":22,"nodeType":"109","messageId":"110","endLine":20,"endColumn":29},{"ruleId":"107","severity":1,"message":"151","line":64,"column":11,"nodeType":"109","messageId":"110","endLine":64,"endColumn":18},{"ruleId":"107","severity":1,"message":"132","line":3,"column":5,"nodeType":"109","messageId":"110","endLine":3,"endColumn":12},{"ruleId":"107","severity":1,"message":"123","line":4,"column":5,"nodeType":"109","messageId":"110","endLine":4,"endColumn":9},{"ruleId":"107","severity":1,"message":"149","line":11,"column":5,"nodeType":"109","messageId":"110","endLine":11,"endColumn":9},{"ruleId":"107","severity":1,"message":"127","line":14,"column":5,"nodeType":"109","messageId":"110","endLine":14,"endColumn":14},{"ruleId":"107","severity":1,"message":"136","line":17,"column":8,"nodeType":"109","messageId":"110","endLine":17,"endColumn":12},{"ruleId":"107","severity":1,"message":"150","line":20,"column":22,"nodeType":"109","messageId":"110","endLine":20,"endColumn":29},{"ruleId":"107","severity":1,"message":"151","line":65,"column":11,"nodeType":"109","messageId":"110","endLine":65,"endColumn":18},{"ruleId":"107","severity":1,"message":"132","line":6,"column":5,"nodeType":"109","messageId":"110","endLine":6,"endColumn":12},{"ruleId":"107","severity":1,"message":"127","line":12,"column":5,"nodeType":"109","messageId":"110","endLine":12,"endColumn":14},{"ruleId":"107","severity":1,"message":"136","line":14,"column":8,"nodeType":"109","messageId":"110","endLine":14,"endColumn":12},{"ruleId":"107","severity":1,"message":"152","line":17,"column":10,"nodeType":"109","messageId":"110","endLine":17,"endColumn":20},{"ruleId":"107","severity":1,"message":"150","line":17,"column":22,"nodeType":"109","messageId":"110","endLine":17,"endColumn":29},{"ruleId":"107","severity":1,"message":"153","line":18,"column":21,"nodeType":"109","messageId":"110","endLine":18,"endColumn":32},{"ruleId":"107","severity":1,"message":"151","line":201,"column":11,"nodeType":"109","messageId":"110","endLine":201,"endColumn":18},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'useQuery' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["154"],"no-negated-in-lhs",["155"],"'Divider' is defined but never used.","'Form' is defined but never used.","'Progress' is defined but never used.","'Segment' is defined but never used.","'Grid' is defined but never used.","'Icon' is defined but never used.","'Card' is defined but never used.","'Image' is defined but never used.","'Header' is defined but never used.","'Input' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'Message' is defined but never used.","'Label' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'logo' is defined but never used.","'CHECK_APPROVED_LOCATION_QUERY' is assigned a value but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'lat' is defined but never used.","'lng' is assigned a value but never used.","The 'in' expression's left operand is negated.","negatedLHS","'List' is defined but never used.","'saveJWT' is defined but never used.","'history' is assigned a value but never used.","'parseQuery' is defined but never used.","'useLocation' is defined but never used.","no-global-assign","no-unsafe-negation"]